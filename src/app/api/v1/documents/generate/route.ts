import { NextRequest, NextResponse } from 'next/server';
import sanitizeHtml from 'sanitize-html'; // For input sanitization
import { connectToDatabase } from '@/lib/mongodb';
import { GeneratedDocumentModel } from '@/lib/models';

export const runtime = 'nodejs';

// Legal disclaimer to include in all generated documents
const LEGAL_DISCLAIMER = `
DISCLAIMER: This document is a template generated by an AI system and is not a substitute for professional legal advice. 
It should be reviewed and customized by a licensed attorney to ensure compliance with applicable laws and regulations.
`;

// Legal-style prompt builders with enhanced AI instructions
function buildNDAPrompt(data: Record<string, string>): string {
  const sanitizedData = sanitizeData(data);
  return `
You are an expert legal assistant tasked with drafting a professional Non-Disclosure Agreement (NDA). Ensure the document is clear, concise, and includes standard legal clauses. Use the provided data to fill in details, and if any data is missing or unclear, include a placeholder (e.g., [Jurisdiction]) and note that it requires user input. Do not invent specific legal terms or jurisdiction-specific details unless provided. Add a section for dispute resolution and ensure the language is formal and enforceable. Include the following disclaimer at the end: "${LEGAL_DISCLAIMER.trim()}"

NON-DISCLOSURE AGREEMENT

This Non-Disclosure Agreement ("Agreement") is entered into as of ${sanitizedData.effectiveDate || '[Effective Date]'} ("Effective Date") by and between:

${sanitizedData.companyName || '[Company Name]'}, a company organized under the laws of ${sanitizedData.companyJurisdiction || '[Jurisdiction]'} ("Disclosing Party"), and
${sanitizedData.recipientName || '[Recipient Name]'} ("Receiving Party").

WHEREAS, the Disclosing Party intends to share confidential information for the purpose of ${sanitizedData.purpose || 'business discussions'};

NOW, THEREFORE, the parties agree as follows:

1. DEFINITION OF CONFIDENTIAL INFORMATION
"Confidential Information" includes, but is not limited to, ${sanitizedData.confidentialInfo || 'trade secrets, business plans, technical data, and proprietary information'}, whether disclosed orally, in writing, or by other means.

2. OBLIGATIONS OF THE RECEIVING PARTY
The Receiving Party shall:
a. Maintain the confidentiality of all Confidential Information;
b. Not disclose Confidential Information to any third party without prior written consent;
c. Use Confidential Information solely for the purpose of ${sanitizedData.purpose || 'evaluating a potential business relationship'};
d. Take reasonable measures to protect the confidentiality of Confidential Information.

3. TERM AND TERMINATION
This Agreement shall remain in effect for ${sanitizedData.duration || 'two (2) years'} from the Effective Date, unless terminated earlier by mutual agreement.

4. RETURN OR DESTRUCTION OF MATERIALS
Upon termination or request, the Receiving Party shall return or destroy all Confidential Information and certify such destruction if requested.

5. GOVERNING LAW AND DISPUTE RESOLUTION
This Agreement shall be governed by the laws of ${sanitizedData.companyJurisdiction || '[Jurisdiction]'}. Disputes shall be resolved through binding arbitration in ${sanitizedData.companyJurisdiction || '[Jurisdiction]'} under the rules of the [Arbitration Body, e.g., AAA].

6. ENTIRE AGREEMENT
This Agreement constitutes the entire understanding between the parties and supersedes all prior agreements.

IN WITNESS WHEREOF, the parties have executed this Agreement as of the Effective Date.

${sanitizedData.companyName || '[Company Name]'}
By: ___________________________
Name: _________________________
Title: ________________________
Date: _________________________

${sanitizedData.recipientName || '[Recipient Name]'}
By: ___________________________
Name: _________________________
Title: ________________________
Date: _________________________

CONTACT INFORMATION:
Disclosing Party: ${sanitizedData.companyName || '[Company Name]'}
Recipient Name: ${sanitizedData.recipientName || '[Recipient Name]'}
Recipient Email: ${sanitizedData.recipientEmail || '[Email]'}
Effective Date: ${sanitizedData.effectiveDate || '[Effective Date]'}
Duration: ${sanitizedData.duration || 'Two (2) years'}

${LEGAL_DISCLAIMER}
`.trim();
}

function buildEmploymentContractPrompt(data: Record<string, string>): string {
  const sanitizedData = sanitizeData(data);
  return `
You are an expert legal assistant tasked with drafting a professional Employment Agreement. Ensure the document is clear, concise, and includes standard employment clauses (e.g., non-compete, at-will employment if applicable). Use the provided data to fill in details, and if any data is missing, include a placeholder (e.g., [Jurisdiction]). Do not invent jurisdiction-specific laws or terms unless provided. Include a section for dispute resolution and ensure the language is formal. Include the following disclaimer at the end: "${LEGAL_DISCLAIMER.trim()}"

EMPLOYMENT AGREEMENT

This Employment Agreement ("Agreement") is entered into as of ${sanitizedData.startDate || '[Start Date]'} ("Effective Date") by and between:

${sanitizedData.employerName || '[Employer Name]'}, a company organized under the laws of ${sanitizedData.employerJurisdiction || '[Jurisdiction]'} ("Employer"), and
${sanitizedData.employeeName || '[Employee Name]'} ("Employee").

WHEREAS, the Employer desires to employ the Employee under the terms herein;

NOW, THEREFORE, the parties agree as follows:

1. POSITION AND DUTIES
The Employee shall serve as ${sanitizedData.jobTitle || '[Job Title]'} and perform duties including:
${sanitizedData.jobDescription || '[Describe duties and responsibilities]'}
The Employee shall report to ${sanitizedData.supervisor || '[Supervisor Name or Title]'}.

2. COMPENSATION
The Employee shall receive an annual salary of ${sanitizedData.salary || '[Salary Amount]'}, payable per the Employer's payroll practices, subject to withholdings.

3. WORK LOCATION
The Employee's primary work location shall be ${sanitizedData.workLocation || '[Work Location]'}. The Employer may modify the location with notice.

4. TERM OF EMPLOYMENT
This Agreement commences on ${sanitizedData.startDate || '[Start Date]'} and continues until terminated per Section 8.

5. WORK SCHEDULE
The Employee shall work ${sanitizedData.workSchedule || '[e.g., 40 hours per week]'}, with additional hours as required.

6. BENEFITS
The Employee is eligible for benefits including ${sanitizedData.benefits || '[e.g., health insurance, retirement plans]'}, subject to plan terms.

7. CONFIDENTIALITY
The Employee shall maintain the confidentiality of the Employer's proprietary information and execute a separate NDA if required.

8. TERMINATION
This Agreement may be terminated by either party with ${sanitizedData.noticePeriod || '[e.g., 30 days]'} written notice, or immediately for cause.

9. GOVERNING LAW AND DISPUTE RESOLUTION
This Agreement is governed by the laws of ${sanitizedData.employerJurisdiction || '[Jurisdiction]'}. Disputes shall be resolved in the courts of ${sanitizedData.employerJurisdiction || '[Jurisdiction]'}.

IN WITNESS WHEREOF, the parties have executed this Agreement as of the Effective Date.

${sanitizedData.employerName || '[Employer Name]'}
By: ___________________________
Name: _________________________
Title: ________________________
Date: _________________________

${sanitizedData.employeeName || '[Employee Name]'}
By: ___________________________
Name: _________________________
Title: ________________________
Date: _________________________

EMPLOYMENT DETAILS:
Job Title: ${sanitizedData.jobTitle || '[Job Title]'}
Start Date: ${sanitizedData.startDate || '[Start Date]'}
Annual Salary: ${sanitizedData.salary || '[Salary Amount]'}
Work Location: ${sanitizedData.workLocation || '[Work Location]'}

${LEGAL_DISCLAIMER}
`.trim();
}

function buildRentalAgreementPrompt(data: Record<string, string>): string {
  const sanitizedData = sanitizeData(data);
  return `
You are an expert legal assistant tasked with drafting a professional Rental Agreement. Ensure the document is clear, concise, and includes standard lease clauses (e.g., maintenance, subletting restrictions). Use the provided data to fill in details, and if any data is missing, include a placeholder (e.g., [Jurisdiction]). Do not invent jurisdiction-specific laws. Include a section for dispute resolution and ensure formal language. Include the following disclaimer at the end: "${LEGAL_DISCLAIMER.trim()}"

RENTAL AGREEMENT

This Rental Agreement ("Agreement") is entered into as of ${sanitizedData.leaseStart || '[Lease Start]'} ("Effective Date") by and between:

${sanitizedData.landlordName || '[Landlord Name]'} ("Landlord"), and
${sanitizedData.tenantName || '[Tenant Name]'} ("Tenant").

WHEREAS, the Landlord owns the property and the Tenant desires to lease it;

NOW, THEREFORE, the parties agree as follows:

1. PREMISES
The Landlord leases to the Tenant the property at ${sanitizedData.propertyAddress || '[Property Address]'} ("Premises") for residential use.

2. TERM
The lease commences on ${sanitizedData.leaseStart || '[Lease Start]'} and terminates on ${sanitizedData.leaseEnd || '[Lease End]'}.

3. RENT
The Tenant shall pay monthly rent of ${sanitizedData.rentAmount || '[Rent Amount]'}, due on the ${sanitizedData.rentDueDay || 'first'} day of each month via ${sanitizedData.paymentMethod || '[Payment Method]'}.

4. SECURITY DEPOSIT
The Tenant has paid a security deposit of ${sanitizedData.securityDeposit || '[Deposit Amount]'}, refundable within ${sanitizedData.depositReturnPeriod || '[e.g., 30 days]'} after lease termination, less deductions.

5. UTILITIES
The Tenant is responsible for all utilities, except ${sanitizedData.landlordUtilities || '[e.g., water, trash]'} provided by the Landlord.

6. MAINTENANCE AND REPAIRS
The Landlord shall perform major repairs; the Tenant shall maintain the Premises in a clean condition and handle minor repairs.

7. USE OF PREMISES
The Tenant shall use the Premises for residential purposes only and not sublet without the Landlord's written consent.

8. TERMINATION
This Agreement may be terminated with ${sanitizedData.noticePeriod || '[e.g., 30 days]'} written notice, per applicable law.

9. GOVERNING LAW AND DISPUTE RESOLUTION
This Agreement is governed by the laws of ${sanitizedData.jurisdiction || '[Jurisdiction]'}. Disputes shall be resolved in the courts of ${sanitizedData.jurisdiction || '[Jurisdiction]'}.

IN WITNESS WHEREOF, the parties have executed this Agreement as of the Effective Date.

${sanitizedData.landlordName || '[Landlord Name]'}
By: ___________________________
Name: _________________________
Title: Landlord
Date: _________________________

${sanitizedData.tenantName || '[Tenant Name]'}
By: ___________________________
Name: _________________________
Title: Tenant
Date: _________________________

PROPERTY DETAILS:
Address: ${sanitizedData.propertyAddress || '[Property Address]'}
Monthly Rent: ${sanitizedData.rentAmount || '[Rent Amount]'}
Security Deposit: ${sanitizedData.securityDeposit || '[Deposit Amount]'}
Lease Start: ${sanitizedData.leaseStart || '[Lease Start]'}
Lease End: ${sanitizedData.leaseEnd || '[Lease End]'}

${LEGAL_DISCLAIMER}
`.trim();
}

function buildServiceAgreementPrompt(data: Record<string, string>): string {
  const sanitizedData = sanitizeData(data);
  return `
You are an expert legal assistant tasked with drafting a professional Service Agreement. Ensure the document is clear, concise, and includes standard clauses (e.g., independent contractor status, deliverables). Use the provided data to fill in details, and if any data is missing, include a placeholder (e.g., [Jurisdiction]). Do not invent jurisdiction-specific laws. Include a section for dispute resolution and ensure formal language. Include the following disclaimer at the end: "${LEGAL_DISCLAIMER.trim()}"

SERVICE AGREEMENT

This Service Agreement ("Agreement") is entered into as of ${sanitizedData.startDate || '[Start Date]'} ("Effective Date") by and between:

${sanitizedData.serviceProvider || '[Service Provider]'}, a ${sanitizedData.providerType || '[e.g., corporation, individual]'} organized under the laws of ${sanitizedData.providerJurisdiction || '[Jurisdiction]'} ("Service Provider"), and
${sanitizedData.clientName || '[Client Name]'} ("Client").

WHEREAS, the Service Provider agrees to provide services to the Client;

NOW, THEREFORE, the parties agree as follows:

1. SCOPE OF SERVICES
The Service Provider shall perform:
${sanitizedData.serviceDescription || '[Describe services]'}
Services shall be performed in a professional manner per industry standards.

2. TERM
This Agreement commences on ${sanitizedData.startDate || '[Start Date]'} and terminates on ${sanitizedData.endDate || '[End Date]'}.

3. COMPENSATION
The Client shall pay ${sanitizedData.serviceFee || '[Fee Amount]'} per the schedule: ${sanitizedData.paymentTerms || '[e.g., 50% upfront, 50% upon completion]'}.

4. PAYMENT TERMS
Payments shall be made via ${sanitizedData.paymentMethod || '[Payment Method]'} within ${sanitizedData.paymentDueDays || '[e.g., 30]'} days of invoice receipt.

5. CONFIDENTIALITY
Both parties shall maintain the confidentiality of proprietary information disclosed during this Agreement.

6. INDEPENDENT CONTRACTOR
The Service Provider is an independent contractor, responsible for its own taxes and compliance.

7. TERMINATION
This Agreement may be terminated with ${sanitizedData.noticePeriod || '[e.g., 30 days]'} written notice, or immediately for material breach.

8. GOVERNING LAW AND DISPUTE RESOLUTION
This Agreement is governed by the laws of ${sanitizedData.providerJurisdiction || '[Jurisdiction]'}. Disputes shall be resolved in the courts of ${sanitizedData.providerJurisdiction || '[Jurisdiction]'}.

IN WITNESS WHEREOF, the parties have executed this Agreement as of the Effective Date.

${sanitizedData.serviceProvider || '[Service Provider]'}
By: ___________________________
Name: _________________________
Title: ________________________
Date: _________________________

${sanitizedData.clientName || '[Client Name]'}
By: ___________________________
Name: _________________________
Title: ________________________
Date: _________________________

SERVICE DETAILS:
Service Provider: ${sanitizedData.serviceProvider || '[Service Provider]'}
Client: ${sanitizedData.clientName || '[Client Name]'}
Service Fee: ${sanitizedData.serviceFee || '[Fee Amount]'}
Payment Terms: ${sanitizedData.paymentTerms || '[Payment Terms]'}
Start Date: ${sanitizedData.startDate || '[Start Date]'}
End Date: ${sanitizedData.endDate || '[End Date]'}

${LEGAL_DISCLAIMER}
`.trim();
}

// Template mapping
const templatePromptBuilders: Record<string, (data: Record<string, string>) => string> = {
  nda: buildNDAPrompt,
  'employment-contract': buildEmploymentContractPrompt,
  'rental-agreement': buildRentalAgreementPrompt,
  'service-agreement': buildServiceAgreementPrompt,
};

// Sanitize input data to prevent injection attacks
function sanitizeData(data: Record<string, string>): Record<string, string> {
  const sanitized: Record<string, string> = {};
  for (const [key, value] of Object.entries(data)) {
    sanitized[key] = sanitizeHtml(value, {
      allowedTags: [],
      allowedAttributes: {},
    });
  }
  return sanitized;
}

// AI document generation with enhanced error handling
async function generateDocumentWithAI({
  templateId,
  formData,
}: {
  templateId: string;
  formData: Record<string, string>;
}): Promise<string> {
  const builder = templatePromptBuilders[templateId];
  if (!builder) {
    throw new Error(`Unknown template: ${templateId}`);
  }
  const prompt = builder(formData);

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek/deepseek-chat-v3-0324:free',
        messages: [
          {
            role: 'system',
            content:
              'You are a professional legal assistant. Draft a legally formatted document based on the provided template. Ensure clarity, formal language, and adherence to standard legal practices. Do not invent jurisdiction-specific laws or fabricate data. If data is missing, use placeholders and note they require user input. Include a disclaimer as provided.',
          },
          { role: 'user', content: prompt },
        ],
        max_tokens: 2048,
        temperature: 0.2,
      }),
    });

    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }

    const data = await response.json();
    const aiText = data.choices?.[0]?.message?.content || '';
    if (!aiText) {
      throw new Error('AI did not return a valid document');
    }

    return aiText;
  } catch (error) {
    console.error('AI generation error:', error);
    throw new Error('Failed to generate document with AI');
  }
}

export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const { templateId, formData, userId } = await request.json();

    // Validate inputs
    if (!templateId || !formData || !userId) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    // Required fields for each template
    const requiredFields: Record<string, string[]> = {
      nda: ['companyName', 'recipientName', 'recipientEmail', 'effectiveDate', 'confidentialInfo', 'duration', 'companyJurisdiction'],
      'employment-contract': [
        'employerName',
        'employeeName',
        'jobTitle',
        'startDate',
        'salary',
        'workLocation',
        'jobDescription',
        'employerJurisdiction',
      ],
      'rental-agreement': [
        'landlordName',
        'tenantName',
        'propertyAddress',
        'rentAmount',
        'leaseStart',
        'leaseEnd',
        'securityDeposit',
        'jurisdiction',
      ],
      'service-agreement': [
        'serviceProvider',
        'clientName',
        'serviceDescription',
        'serviceFee',
        'startDate',
        'endDate',
        'paymentTerms',
        'providerJurisdiction',
      ],
    };

    // Validate required fields
    const missingFields = requiredFields[templateId]?.filter(
      (field) => !formData[field] || formData[field].trim() === ''
    );
    if (missingFields?.length > 0) {
      return NextResponse.json(
        { error: `Missing or empty required fields: ${missingFields.join(', ')}` },
        { status: 400 }
      );
    }

    try {
      // Use legal-style prompt for the AI
      const document = await generateDocumentWithAI({ templateId, formData });
      console.log("document", document);

      // Save to MongoDB
      try {
        await connectToDatabase();
        // Ensure GeneratedDocumentModel is a valid Mongoose model
        const doc = new GeneratedDocumentModel({
          userId,
          templateId,
          formData,
          document,
          createdAt: new Date(),
        });
        await doc.save();
      } catch (mongoError) {
        console.error('Failed to save document to MongoDB:', mongoError);
        // Do not fail the request if saving fails, just log
      }

      // Log the document generation for analytics
      console.log(`Document generated for user ${userId}, template: ${templateId}`);

      return NextResponse.json({
        success: true,
        document,
        templateId,
        generatedAt: new Date().toISOString(),
      });
    } catch (error) {
      console.error('Error generating document:', error);
      return NextResponse.json(
        { error: error instanceof Error ? error.message : 'Internal server error' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Request processing error:', error);
    return NextResponse.json({ error: 'Invalid request body' }, { status: 400 });
  }
}